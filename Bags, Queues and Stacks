Stacks and Queues : Collection of objects

    Stak: Push & Pop -> Examine the most recently added.
    Queue: Enqueue & Dequeue -> Examine the least recently added.
  
    Client: program using operations defined in interface
    Implementation: the actual code
    Interface: description of data type and operations
  
Stacks:

		Warmup: Reverse sequenece of strings
		//Press Ctrl+Z+Enter to indicate the EOF of inputs on console.
		public static void main(String args[]) throws IOException {
			Stack<String> s = new Stack<String>();
			Scanner r = new Scanner(System.in);
			while (r.hasNextLine()){
				s.push(r.nextLine());
				}
			while (s.isEmpty() == false){
				System.out.println(s.pop());
				}
		}

	LinkedList implementation:
			Class Node{
			String value; //holds the vale
			Node next; //"points" to the next node
			}
			// ~40 bytes each = 16B object overhead + 8B extra overhead + 8B refOfString + 8B refOfNode
	Array implementation:
		Overflow: use resizing array for array implementation
		Underflow: throw exception if pop from empty stack
		
Resizing array: Grow and shrink array e.g. ArrayList
	If an array is full, creat a new one of twice the size
	
